#include <stdio.h>
#include <stdlib.h>
#include <string.h>


//EX02

//a) implemente uma pilha com 10 elementos do tipo "caractere" e teste suas rotinas na main
typedef struct pilha { 
	char vet[10]; 
	int topo; 
} TPilha;
	
void create(TPilha *p) { 
	p->topo = -1; 
}

void destroy(TPilha *p) { 
	p->topo = -1;
}

int isfull(TPilha *p) { 
	if (p->topo == 9) return 1; 
	else return 0; 
}

int isempty(TPilha *p) { 
	if (p->topo == -1) return 1; 
	else return 0; 
}

void push(TPilha *p, char x) { 
	if (isfull(p)) { 
		printf("overflow\n"); 
		abort(); 
	} 
	p->topo++;
	p->vet[p->topo] = x;
}

char pop(TPilha *p) { 
	char aux;
	if (isempty(p)) { 
		printf("underflow\n"); 
		abort(); 
	} 
	aux = p->vet[p->topo]; 
	p->topo--; 
	return aux; 
}

char top(TPilha *p) { 
	if (isempty(p)) { 
		printf("underflow\n"); 
		abort(); 
	} 
	return p->vet[p->topo]; 
}

void inverte(char s[]) { 
	int i, tam; 
	TPilha p; 
	create(&p); 
	tam = strlen(s); 
	for (i = 0; i < tam; i++) push(&p, s[i]); 
	for (i = 0; !isempty(&p); i++){
		s[i] = pop(&p); 
		printf("%c", s[i]);
	} 
}

//b) construa uma rotina que retorne verdadeiro ou falso (0 ou 1) indicando se a string passada Ã© palindroma
int palindroma(char s[]){
	int tam, i, metade, tam_par;
	
	tam = strlen(s);
	
	metade = tam/2;
	tam_par = tam%2;
	if (tam_par==0){
		for (i = 0; i<metade; i++){
			vet[i] = pop(&p);
		} 
	}
	else{
		while (i!=tam){
			if (*vet[i] != *vet[tam]) cont++;
			i++;
			tam--;
		}
	}
	
	if (cont!=0) return 0;
	else 		 return 1;		
}


//c) construa uma rotina que classifique uma frase invertendo palavra a palavra da frase
void inverte_palavra(char s[]){
	int cont;
	int i=0;
	do {
		if s[i]==' '{
			for(tam_palavra=0;cont>tam_palavra;tam_palavra++){	
			}
			inverte(s[]);
		}
		cont++;
		i++
	} while s[i]=!'\0';
}

int main(void) {
	printf("------EX01a------\n");
	
	TPilha vet;
	create (&vet);
	printf("PRIMEIRA VERIFICACAO: PILHA VAZIA\n");
	printf("Sendo (0) Falso e (1) Verdadeiro");
	printf("\nPilha esta vazia? %d", isempty(&vet));
	printf("\nPilha esta cheia? %d", isfull(&vet));
	push(&vet, 'a');
	push(&vet, 'n');
	push(&vet, 'i');
	push(&vet, 'l');
	push(&vet, 'i');
	push(&vet, 'n');
	push(&vet, 'a');
	printf("\nSEGUNDA VERIFICACAO: PILHA NAO VAZIA");
	printf("\nPilha esta vazia? %d", isempty(&vet));
	printf("\nTopo da pilha: %c", top(&vet));
	inverte(vet);
	destroy(&vet);						
	
	printf("\n\n------EX01b------\n");


	printf("\n\n------EX01c------\n");
	
	
	return 0;
}
